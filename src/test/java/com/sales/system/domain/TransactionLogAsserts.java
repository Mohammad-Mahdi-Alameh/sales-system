package com.sales.system.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TransactionLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogAllPropertiesEquals(TransactionLog expected, TransactionLog actual) {
        assertTransactionLogAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogAllUpdatablePropertiesEquals(TransactionLog expected, TransactionLog actual) {
        assertTransactionLogUpdatableFieldsEquals(expected, actual);
        assertTransactionLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogAutoGeneratedPropertiesEquals(TransactionLog expected, TransactionLog actual) {
        assertThat(actual)
            .as("Verify TransactionLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogUpdatableFieldsEquals(TransactionLog expected, TransactionLog actual) {
        assertThat(actual)
            .as("Verify TransactionLog relevant properties")
            .satisfies(a -> assertThat(a.getTimestamp()).as("check timestamp").isEqualTo(expected.getTimestamp()))
            .satisfies(a -> assertThat(a.getOperationType()).as("check operationType").isEqualTo(expected.getOperationType()))
            .satisfies(a -> assertThat(a.getFieldChanged()).as("check fieldChanged").isEqualTo(expected.getFieldChanged()))
            .satisfies(a -> assertThat(a.getOldValue()).as("check oldValue").isEqualTo(expected.getOldValue()))
            .satisfies(a -> assertThat(a.getNewValue()).as("check newValue").isEqualTo(expected.getNewValue()))
            .satisfies(a -> assertThat(a.getModifiedBy()).as("check modifiedBy").isEqualTo(expected.getModifiedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionLogUpdatableRelationshipsEquals(TransactionLog expected, TransactionLog actual) {
        assertThat(actual)
            .as("Verify TransactionLog relationships")
            .satisfies(a -> assertThat(a.getSaleTransaction()).as("check saleTransaction").isEqualTo(expected.getSaleTransaction()));
    }
}
