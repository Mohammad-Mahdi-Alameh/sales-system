package com.sales.system.domain;

import static com.sales.system.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SaleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAllPropertiesEquals(Sale expected, Sale actual) {
        assertSaleAutoGeneratedPropertiesEquals(expected, actual);
        assertSaleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAllUpdatablePropertiesEquals(Sale expected, Sale actual) {
        assertSaleUpdatableFieldsEquals(expected, actual);
        assertSaleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAutoGeneratedPropertiesEquals(Sale expected, Sale actual) {
        assertThat(actual)
            .as("Verify Sale auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleUpdatableFieldsEquals(Sale expected, Sale actual) {
        assertThat(actual)
            .as("Verify Sale relevant properties")
            .satisfies(a -> assertThat(a.getCreationDate()).as("check creationDate").isEqualTo(expected.getCreationDate()))
            .satisfies(a -> assertThat(a.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotal()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleUpdatableRelationshipsEquals(Sale expected, Sale actual) {
        assertThat(actual)
            .as("Verify Sale relationships")
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getSeller()).as("check seller").isEqualTo(expected.getSeller()));
    }
}
