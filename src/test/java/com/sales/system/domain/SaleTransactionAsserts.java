package com.sales.system.domain;

import static com.sales.system.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SaleTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleTransactionAllPropertiesEquals(SaleTransaction expected, SaleTransaction actual) {
        assertSaleTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertSaleTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleTransactionAllUpdatablePropertiesEquals(SaleTransaction expected, SaleTransaction actual) {
        assertSaleTransactionUpdatableFieldsEquals(expected, actual);
        assertSaleTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleTransactionAutoGeneratedPropertiesEquals(SaleTransaction expected, SaleTransaction actual) {
        assertThat(actual)
            .as("Verify SaleTransaction auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleTransactionUpdatableFieldsEquals(SaleTransaction expected, SaleTransaction actual) {
        assertThat(actual)
            .as("Verify SaleTransaction relevant properties")
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a ->
                assertThat(a.getSubtotal()).as("check subtotal").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSubtotal())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleTransactionUpdatableRelationshipsEquals(SaleTransaction expected, SaleTransaction actual) {
        assertThat(actual)
            .as("Verify SaleTransaction relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getSale()).as("check sale").isEqualTo(expected.getSale()));
    }
}
